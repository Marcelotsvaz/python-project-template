include:
  - component: gitlab.com/marcelotsvaz/gitlab/sane-workflow@main
  - component: gitlab.com/marcelotsvaz/gitlab/stages@main
  - component: gitlab.com/marcelotsvaz/gitlab/sast@main
  - component: gitlab.com/marcelotsvaz/gitlab/secret-detection@main


variables:
    PIP_ROOT_USER_ACTION: ignore  # Ignore pip warning when running as root.
    gitlabPypiUrl: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi


default:
    image: python:3.12.0-alpine3.18@sha256:a5d1738d6abbdff3e81c10b7f86923ebcb340ca536e21e8c5ee7d938d263dba1
    
    before_script:
      - apk add --no-cache git
      - pip install --no-cache-dir pdm
      - pdm install --plugins
    
    interruptible: true



# 
# Build stage.
#---------------------------------------------------------------------------------------------------
package:
    # Build main package using PDM.
    
    extends: .build
    
    script:
      - pdm build
      
      # Get data for link in GitLab release.
      - cd .staging/dist/
      - printf 'wheelName=%s\n' *.whl >> ../package.env
      - echo wheelHash=$(sha256sum *.whl | cut -d ' ' -f 1 ) >> ../package.env
      - printf 'sdistName=%s\n' *.tar.gz >> ../package.env
      - echo sdistHash=$(sha256sum *.tar.gz | cut -d ' ' -f 1 ) >> ../package.env
    
    artifacts:
        paths:
          - .staging/dist/
        reports:
            dotenv: .staging/package.env


pages:build:
    # Build documentation using TODO.
    
    extends: .build
    
    variables:
        pages: &pages .staging/pages
    
    script:
      - mkdir -p ${pages}/documentation/
      - cp doc/homepage/* ${pages}/
      - cp doc/documentation/* ${pages}/documentation/
    
    artifacts:
        paths:
          - *pages



# 
# Test stage.
#---------------------------------------------------------------------------------------------------
test:
    # Run tests on main package.
    
    extends: .test
    
    script:
      - pdm sync
      - pdm test
    
    coverage: /^TOTAL.+?(\d+(?:\.\d+)?\%)$/
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: .staging/coverage.xml



# 
# Deploy stage.
#---------------------------------------------------------------------------------------------------
package:gitlab:
    # Publish main package to project's package repository.
    
    extends: .deploy
    
    variables:
        PDM_PUBLISH_REPO: ${gitlabPypiUrl}
        PDM_PUBLISH_USERNAME: gitlab-ci-token
        PDM_PUBLISH_PASSWORD: ${CI_JOB_TOKEN}
    
    script:
      - pdm publish --no-build


package:pypi:
    # Publish main package to PyPI.
    
    extends: .deploy
    
    variables:
        PDM_PUBLISH_USERNAME: __token__
        PDM_PUBLISH_PASSWORD: ${PYPI_API_TOKEN}
    
    script:
      - pdm publish --no-build


pages:
    # Trigger deployment to GitLab Pages.
    
    extends: .deploy
    
    needs: [ pages:build ]
    
    environment:
        name: pages
        url: ${CI_PAGES_URL}
    
    publish: *pages # No trailing slash.
    artifacts:
        paths:
          - *pages



# 
# Release stage.
#---------------------------------------------------------------------------------------------------
release:gitlab:
    # Create GitLab release as last step in the pipeline.
    
    extends: .release
    
    image: registry.gitlab.com/gitlab-org/release-cli:latest@sha256:5a71acbadc47c1971100f5246b09f88ba09e84ebe7769e425475dce85245a2bf
    
    before_script: []
    
    release:
        tag_name: ${CI_COMMIT_TAG}
        description: ${CI_COMMIT_TAG}
        assets:
            links:
              - name: Documentation
                url: ${CI_PAGES_URL}
              
              - name: Package on PyPI
                url: https://pypi.org/project/marcelotsvaz-python-project-template/${CI_COMMIT_TAG}/
              
              - name: Wheel
                url: ${gitlabPypiUrl}/files/${wheelHash}/${wheelName}
                filepath: /${wheelName}
                link_type: package
              
              - name: Source Distribution
                url: ${gitlabPypiUrl}/files/${sdistHash}/${sdistName}
                filepath: /${sdistName}
                link_type: package