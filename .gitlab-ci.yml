stages:
  - build
  - test

include:
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml


variables:
    PIP_ROOT_USER_ACTION: ignore  # Ignore pip warning when running as root.
    gitlabPypiUrl: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi


default:
    image: python:3.11.6-alpine3.18
    
    before_script:
      - apk add --no-cache git
      - pip install --no-cache-dir pdm
      - pdm install --plugins
    
    interruptible: true



# 
# Build stage.
#---------------------------------------------------------------------------------------------------
package:
    # Build main package using PDM.
    
    stage: build
    
    script:
      - pdm build
      
      # Get data for link in GitLab release.
      - cd .staging/dist/
      - printf 'wheelName=%s\n' *.whl >> ../package.env
      - echo wheelHash=$(sha256sum *.whl | cut -d ' ' -f 1 ) >> ../package.env
      - printf 'sdistName=%s\n' *.tar.gz >> ../package.env
      - echo sdistHash=$(sha256sum *.tar.gz | cut -d ' ' -f 1 ) >> ../package.env
    
    rules:
      - when: on_success
    
    artifacts:
        paths:
          - .staging/dist/
        reports:
            dotenv: .staging/package.env


pages:build:
    # Build documentation using TODO.
    
    stage: build
    
    variables:
        pages: &pages .staging/pages
    
    script:
      - mkdir -p ${pages}/documentation/
      - cp doc/homepage/* ${pages}/
      - cp doc/documentation/* ${pages}/documentation/
    
    artifacts:
        paths:
          - *pages



# 
# Test stage.
#---------------------------------------------------------------------------------------------------
test:
    # Run tests on main package.
    
    stage: test
    
    script:
      - pdm sync
      - pdm test
    
    coverage: /^TOTAL.+?(\d+(?:\.\d+)?\%)$/
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: .staging/coverage.xml