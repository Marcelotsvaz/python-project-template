include:
  - component: gitlab.com/marcelotsvaz/gitlab/sane-workflow@1.0.0
  - component: gitlab.com/marcelotsvaz/gitlab/stages@1.0.0
  - component: gitlab.com/marcelotsvaz/gitlab/sast@1.0.0
  - component: gitlab.com/marcelotsvaz/gitlab/secret-detection@1.0.0
  - component: gitlab.com/marcelotsvaz/gitlab/release@1.0.0


variables:
    PIP_ROOT_USER_ACTION: ignore  # Ignore pip warning when running as root.
    gitlabPypiUrl: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi


default:
    image: python:3.11.6-alpine3.18@sha256:527e0b0d92686a3ab1af3e65fdef12a47a9359f298dfd9b8d36617808d4029e9
    
    before_script:
      - apk add --no-cache git
      - pip install --no-cache-dir pdm
      - pdm install --plugins



# 
# Build stage.
#---------------------------------------------------------------------------------------------------
Python Package:
    # Build package using PDM.
    
    extends: .buildStage
    
    script:
      - pdm build
      
      # Get data for link in GitLab release.
      - cd .staging/dist/
      - printf 'wheelName=%s\n' *.whl >> ../package.env
      - echo wheelHash=$(sha256sum *.whl | cut -d ' ' -f 1 ) >> ../package.env
      - printf 'sdistName=%s\n' *.tar.gz >> ../package.env
      - echo sdistHash=$(sha256sum *.tar.gz | cut -d ' ' -f 1 ) >> ../package.env
    
    artifacts:
        name: package
        expose_as: Package distribution
        paths:
          - .staging/dist/
        
        reports:
            dotenv: .staging/package.env


Documentation:
    # Build documentation using MkDocs.
    
    extends: .buildStage
    
    variables:
        pagesPublicDir: .staging/pages
        index: index.html
        editUri: -/edit/${CI_COMMIT_REF_NAME}/docs/src/
    
    script:
      - apk add --no-cache gcc musl-dev zlib-dev jpeg-dev cairo
      - pdm sync --no-default --group docs
      - pdm run docs
    
    artifacts:
        paths:
          - !reference [ Documentation, variables, pagesPublicDir ]
    
    cache:
        key: ${CI_COMMIT_REF_SLUG}-mkdocs
        paths: [ .staging/cache/mkdocs/ ]
    
    rules:
      - if: $CI_PIPELINE_TYPE == 'merge_request'
        variables:
            useDirectoryUrls: 'false'



# 
# Test stage.
#---------------------------------------------------------------------------------------------------
Unit Tests:
    # Run unit tests on package.
    
    extends: .testStage
    
    script:
      - pdm sync --group dev
      - pdm run test
    
    coverage: /^TOTAL.+?(\d+(?:\.\d+)?\%)$/
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: .staging/coverage.xml



# 
# Staging stage.
#---------------------------------------------------------------------------------------------------
Documentation Review App:
    # Deploy documentation as a job artifact and create a Review App for it.
    
    extends: .stagingStage
    
    needs: [ Documentation ]
    
    variables: !reference [ Documentation, variables ]
    
    environment:
        name: staging/${CI_COMMIT_REF_SLUG}/documentation
        url: https://${CI_PROJECT_NAMESPACE}.${CI_PAGES_DOMAIN}/-/${CI_PROJECT_NAME}/-/jobs/${CI_JOB_ID}/artifacts/${pagesPublicDir}/${index}
    
    artifacts: !reference [ Documentation, artifacts ]



# 
# Deploy stage.
#---------------------------------------------------------------------------------------------------
GitLab Package Registry:
    # Publish package to project's package registry.
    
    extends: .deployStage
    
    variables:
        PDM_PUBLISH_REPO: ${gitlabPypiUrl}
        PDM_PUBLISH_USERNAME: gitlab-ci-token
        PDM_PUBLISH_PASSWORD: ${CI_JOB_TOKEN}
    
    script:
      - pdm publish --no-build


PyPI:
    # Publish package to PyPI.
    
    extends: .deployStage
    
    variables:
        PDM_PUBLISH_USERNAME: __token__
        PDM_PUBLISH_PASSWORD: ${PYPI_API_TOKEN}
    
    script:
      - pdm publish --no-build


pages:
    # Deploy documentation to GitLab Pages.
    
    extends: .deployStage
    
    needs: [ Documentation ]
    
    environment:
        name: documentation
        url: ${CI_PAGES_URL}
    
    publish: !reference [ Documentation, variables, pagesPublicDir ] # No trailing slash.
    artifacts: !reference [ Documentation, artifacts ]



# 
# Release stage.
#---------------------------------------------------------------------------------------------------
GitLab Release:
    before_script: []
    
    release:
        assets:
            links:
              - name: Documentation
                url: ${CI_PAGES_URL}
              
              - name: Package on PyPI
                url: https://pypi.org/project/marcelotsvaz-python-project-template/${CI_COMMIT_TAG}/
              
              - name: Wheel
                url: ${gitlabPypiUrl}/files/${wheelHash}/${wheelName}
                filepath: /${wheelName}
                link_type: package
              
              - name: Source Distribution
                url: ${gitlabPypiUrl}/files/${sdistHash}/${sdistName}
                filepath: /${sdistName}
                link_type: package