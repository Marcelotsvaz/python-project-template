[project]
	name = 'marcelotsvaz-python-project-template'
	dynamic = [ 'version' ]
	description = 'Template to quickly bootstrap Python projects.'
	readme = 'readme.md'
	license = { file = 'unlicense.txt' }
	
	authors = [
		{ name = 'Marcelo Vaz', email = 'marcelotsvaz@gmail.com' },
	]
	
	classifiers = [
		'Programming Language :: Python :: 3',
		'Operating System :: OS Independent',
		'License :: OSI Approved :: The Unlicense (Unlicense)',
		# 'License :: Other/Proprietary License',
	]
	
	requires-python = '>= 3.11'
	dependencies = [
		'django >= 4.2.5',	# Example.
	]
	
	optional-dependencies.json = [
		'jsons >= 1.6.3',	# Example.
	]
	
	
	[project.scripts]
		project-template = 'project_template.cli:main'
	
	
	[project.urls]
		homepage = 'https://marcelotsvaz.gitlab.io/python-project-template/'
		documentation = 'https://marcelotsvaz.gitlab.io/python-project-template/documentation/'
		# changelog = ''
		issues = 'https://gitlab.com/marcelotsvaz/python-project-template/-/issues'
		source = 'https://gitlab.com/marcelotsvaz/python-project-template'
		# donate = ''



# 
# Building.
#-------------------------------------------------------------------------------
[build-system]
	build-backend = 'pdm.backend'
	requires = [
		'pdm-backend',
		'./build',
	]



[tool.pdm]
	version.source = 'scm'
	plugins = [ '-e ./build' ]
	dev-dependencies.dev = [
		'coverage >= 7.3.1',
		'pdm-backend >= 2.1.6',
		'pylint >= 2.17.5',
	]
	
	
	[tool.pdm.scripts]
		test.composite = [ 'coverage', 'coverage-report' ]
		test.help = 'Run tests with code coverage and show coverage report.'
		
		coverage.shell = 'coverage run -m ${unittestCommand}'
		coverage.help = 'Run tests with code coverage.'
		
		coverage-report.cmd = 'coverage report'
		coverage-report.help = 'Show coverage report.'
		
		test-only.shell = 'python -m ${unittestCommand}'
		test-only.help = 'Run tests without code coverage.'
		
		_.env.unittestCommand = 'unittest discover --pattern *_tests.py --start-directory tests/ --verbose'



# 
# Tools.
#-------------------------------------------------------------------------------
[tool.pyright]
	typeCheckingMode = 'strict'
	reportMissingTypeStubs = 'none'
	reportUnnecessaryTypeIgnoreComment = 'error'
	reportMissingSuperCall = 'warning'
	reportUnknownLambdaType = 'none'



[tool.pylint]
	indent-string = '	'
	check-quote-consistency = true
	ignore-long-lines = '# pyright: ignore'
	
	load-plugins = [
		'pylint.extensions.docparams',
		'pylint.extensions.overlapping_exceptions',
	]
	
	enable = [
		'useless-suppression',
	]
	
	disable = [
		'trailing-whitespace',
		'missing-final-newline',
		'logging-fstring-interpolation',
		'too-few-public-methods',
	]
	
	# Naming.
	variable-naming-style = 'camelCase'
	inlinevar-naming-style = 'camelCase'
	function-naming-style = 'camelCase'
	argument-naming-style = 'camelCase'
	method-naming-style = 'camelCase'
	class-attribute-naming-style = 'camelCase'
	attr-naming-style = 'camelCase'
	
	# Naming (unchanged).
	module-naming-style = 'snake_case'
	class-naming-style = 'PascalCase'
	const-naming-style = 'UPPER_CASE'
	class-const-naming-style = 'UPPER_CASE'
	
	# Exceptions for tests.
	no-docstring-rgx = '^__|.+Tests$|^test|^[Ff]oo$|^[Bb]ar$'
	dummy-variables-rgx = '^(_|[Ff]oo|[Bb]ar)$'
	bad-names = []



[tool.coverage]
	run.source_pkgs = [ 'project_template' ]
	run.data_file = '.staging/coverage'
	run.branch = true
	
	report.precision = 2
	report.skip_covered = true
	report.show_missing = true
	
	xml.output = '.staging/coverage.xml'